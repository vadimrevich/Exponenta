Один из существенных недостатков стайлера Exponenta, мешающий его популярности -- это его невозможность работы в сети организаций с доменным разрешением имён.

Как известно, в отличие от UNIX систем, имена в Windows начинаются или с префикса домена DOMAIN\login, или с имени компьютера COMPUTER\login, как это часто бывает в сети обычных пользователей. И если указание логина без имени компьютера срабатывает для обычных пользователей рабочей группы, то опустить имя домена  при авторизации сети с доменами не получится. Самое интересное -- доменные имена Windows компьютеров, в отличие от доменных имён UNIX компьютеров, вычислить намного сложнее. Дело в том, что доменные имена UNIX компьютеров привязаны к его интернет-имени (например, dummy.com), то такой же привязки для Windows леса обычно не производится. Так, домен DOMAIN может принадлежать лесу DOMAIN.internal, который ни при каких обстоятельствах не будет иметь выход в Интернет, а интернет-домен Windows компьютера при этом будет что-то вроде dummy.san.com. Совсем хорошо, да? Определить лес компьютера возможно будет только в том случае, когда появится удалённый доступ к серверу. Но именно его мы не можем получить, не зная имя домена! Получается какой-то замкнутый круг!... Но выход есть, и вот его предпосылки.

Во-первых, на сервере Microsoft Windows Server обычно никто не работает. А значит, получить доступ к нему методами социальной инженерии не получится. В любом случае к нему доступ будет возможен только при помощи эксплуатации какой-нибудь уязвимости. А значит, временный доступ к серверу для запуска скриптов чаще всего можно получить для любого сервера.

Во-вторых, исходя из первого абзаца, мы сможем установить на Windows Server диагностические утилиты, которые передадут данные о сети на удалённый сервер. Затем ещё раз запускаем удалённый скрипт, чтобы получить доступ к компьютеру для создания нового пользователя, назначения заданий в планировщике, собственно организации удалённого доступа. Тогда вирусом будет только второй модуль, первый же модуль будет обычной администраторской утилитой.

Таким образом мы превращаем основной модуль стайлера Exponenta в его плагин, который не делает никакого вредоносного кода, но подготавливает компьютер к заражению. Плагины оформляются как установочные EXE или MSI файлы, которые можно скрытно установить на компьютер. Все плагины будут скачиваться в папку %PUB1%\Distrib\plugins, откуда будут устанавливаться по требованию. Эти плагины не будут привязаны ни к версии стайлера Eexponenta, ни к его способу распространения (FTP, HTTP). Однако, на первом этапе, для его распространения должен быть доступен открытый анонимный FTP сервер, на котором будут хоститься все плагины и программа для их установки. Данный скрипт будет устанавливать переменную Hacker_host1 для скачивания наиболее общих плагинов. Ещё одна сложность, возникающая при разработке данного модуля. Нужно предусмотреть, чтобы при пересылке данных сервера на публичный хост его данные не были бы обезличенными. То есть в имена передаваемых файлов или архивов должен быть записан его текущий IP адрес и время отработки скрипта.

Собственно модуль заражения будет называться Exponenta-Overload, и он уже назначает переменные Hacer_User, Hacker_Pass, Hacker_host2, создаёт учётные записи для удалённого доступа и задания в планировщике. Естественно, Все данные берутся из первого отработанного скрипта. В дополнение к первой версии стайлера создаётся ещё переменная M_Domain, в которой будет содержаться имя домена корпоративной сети. Также в планировщик надо будет вставить задание для назначения Dynamic DNS имени компьютера по его IP адресу на сервисе EntryDNS или каком-нибудь другом. Это имя будет записываться в переменную Hacker_host3.

Итак, определим порядок действий первого скрипта:

1. Создание переменной окружения Hacker_host1 и PUB1
2. Создание каталога %PUB1%\Distrib\Plugins
3. Скачка туда всех дистрибутивов из папки Exponenta на FTP сервере
4. Установка нужных дистрибутивов-плагинов.
5. Установка Chocolatey и нужных пакетов из него.
6. Определение внешнего IP адреса компьютера.
7. Определение системного окружения компьютера программой SystemInfo.
9. Перевод всех настроек реестра, групповых политик и правил брандмауэра в режим Unsecurity.

Порядок действий второго скрипта:

1. Создание переменных окружения Hacker_User, Hacker_Pass, Hacker_host2, Hacker_host3
2. Создание учётной записи MyAdminAccount с паролем MyAdminPassword (локально и в домене)
3. Закачка скрипта регистрации DynDNS
4. Создание заданий для планировщика
5. Первый запуск готовых скриптов для проверки работоспособности стайлера.
8. Формирование имени отправляемого файла из префикса System_information, IP адреса и даты выполнения скрипта.
10. Передача данного файла на приватный хостинг в закрытый доступ.

Как видим, основная подготовительная работа осуществилась при запуске первого скрипта. При этом все действия скрипта, кроме 9 и 10, можно назвать не вредными, а полезными.

Скрипт Unsecurity должен выполнять следующие действия:

1. Создать правило брандмауэра, разрешающие любые соединения ftp.exe для всех сетей
2. Создать правила брандмауэра, разрешающие удалённые подключения по telnet, winrm, ssh, rdp, radmin для всех сетей
3. Включить правила брандмауэра, разрешающие доступ к компьютеру по протоколам SMB и RPC (как это сделать из командной строки?)
4. Настроить доступ к компьютеру по telnet, winrm и rdp
5. Расшарить диск C: компьютера
6. Разрешить доступ к компьютеру (шаре) анонимных пользователей
7. Подготовить скрипт для принудительной остановки всех антивирусов

